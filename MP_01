// MP 1
#include <wb.h>

#define wbCheck(stmt) do { 							\
	cudaError_t err = stmt; 						\
	if (err != cudaSuccess) { 						\
		wbLog(ERROR, "Failed to run stmt ", #stmt); \
		return -1; 									\
	} 												\
} while(0)

__global__ void vecAdd(float *in1, float *in2, float *out, int len) {
	int i = threadIdx.x +blockDim.x*blockIdx.x;
	if (i<len) out[i] = in1[i] + in2[i];
}

// This WebGPU has computational capabilities: 3.0 according to the device query
// We'll keep double check anyway
#if (__CUDA_ARCH__ > 130)
	static const unsigned int THREADS_PER_BLOCK = 1024;
#else
	static const unsigned int THREADS_PER_BLOCK = 512;
#endif

int main(int argc, char **argv) {
  wbArg_t args;
  int inputLength;
  float *hostInput1;
  float *hostInput2;
  float *hostOutput;
  float *deviceInput1;
  float *deviceInput2;
  float *deviceOutput;

  args = wbArg_read(argc, argv);

  wbTime_start(Generic, "Importing data and creating memory on host");
  hostInput1 = ( float * )wbImport(wbArg_getInputFile(args, 0), &inputLength);
  hostInput2 = ( float * )wbImport(wbArg_getInputFile(args, 1), &inputLength);
  hostOutput = ( float * )malloc(inputLength * sizeof(float));
  wbTime_stop(Generic, "Importing data and creating memory on host");

  wbLog(TRACE, "The input length is ", inputLength);

  wbTime_start(GPU, "Allocating GPU memory.");
	size_t size = inputLength * sizeof(float);
	wbLog(TRACE, "Allocating ", size, " bytes");
	wbCheck(cudaMalloc((void **) &deviceInput1, size));
	wbCheck(cudaMalloc((void **) &deviceInput2, size));
	wbCheck(cudaMalloc((void **) &deviceOutput, size));  
  wbTime_stop(GPU, "Allocating GPU memory.");

  wbTime_start(GPU, "Copying input memory to the GPU.");
	wbCheck(cudaMemcpy(deviceInput1,hostInput1,size,cudaMemcpyHostToDevice));
	wbCheck(cudaMemcpy(deviceInput2,hostInput2,size,cudaMemcpyHostToDevice));
  wbTime_stop(GPU, "Copying input memory to the GPU.");

  //@@ Initialize the grid and block dimensions here
	dim3 DimGrid((inputLength-1)/THREADS_PER_BLOCK+1, 1, 1);	// One-dimensional arrays here
	dim3 DimBlock(THREADS_PER_BLOCK, 1, 1); 			// One-dimensional arrays here

  wbTime_start(Compute, "Performing CUDA computation");
  //@@ Launch the GPU Kernel here
	vecAdd<<<DimGrid,DimBlock>>>(deviceInput1, deviceInput2, deviceOutput, size);

  cudaDeviceSynchronize();
  wbTime_stop(Compute, "Performing CUDA computation");

  wbTime_start(Copy, "Copying output memory to the CPU");
	wbCheck(cudaMemcpy(hostOutput,deviceOutput,size,cudaMemcpyDeviceToHost));
  wbTime_stop(Copy, "Copying output memory to the CPU");

  wbTime_start(GPU, "Freeing GPU Memory");
	wbCheck(cudaFree(deviceInput1));
	wbCheck(cudaFree(deviceInput2));
	wbCheck(cudaFree(deviceOutput));
  wbTime_stop(GPU, "Freeing GPU Memory");

  wbSolution(args, hostOutput, inputLength);

  free(hostInput1);
  free(hostInput2);
  free(hostOutput);

  return 0;
}
