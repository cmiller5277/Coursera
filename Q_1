
Question 1
If we need to use each thread to calculate one output element of a vector addition, what would be the expression for mapping the thread/block indices to data index:
Your Answer 		Score 	Explanation
i=blockIdx.x + threadIdx.x; 			
i=blockIdx.x * threadIdx.x; 			
i=threadIdx.x + threadIdx.y; 			
[x] i=blockIdx.x*blockDim.x + threadIdx.x; 	Correct 	1.00 	This is the case we covered in Lecture 1.4.

Question 2
Assume that we want to use each thread to calculate two (adjacent) elements of a vector addition. What would be the expression for mapping the thread/block indices to i, the data index of the first element to be processed by a thread?
Your Answer 		Score 	Explanation
i=blockIdx.x*threadIdx.x*2; 			
i=blockIdx.x*blockDim.x + threadIdx.x +2; 			
[x] i=(blockIdx.x*blockDim.x + threadIdx.x)*2; 	Correct 	1.00 	Every thread covers 2 consecutive elements. The starting data index is simply twice the global thread index. Another way to look at it is that all previous blocks cover (blockIdx.x*blockDim.x)*2. Within the block, each thread covers 2 consecutive elements so the beginning position for a thread is 2*threadIdx.x.
i=blockIdx.x*blockDim.x*2 + threadIdx.x; 			
	
Question 3
We want to use each thread to calculate two elements of a vector addition. Each thread block process 2*blockDim.x consecutive elements that form two sections. All threads in each block will first process a section first, each processing one element. They will then all move to the next section, each processing one element. Assume that variable i should be the index for the first element to be processed by a thread. What would be the expression for mapping the thread/block indices to data index of the first element?
Your Answer 		Score 	Explanation
i=(blockIdx.x*blockDim.x + threadIdx.x)*2; 			
i=blockIdx.x*blockDim.x + threadIdx.x +2; 			
[x] i=blockIdx.x*blockDim.x*2 + threadIdx.x; 	Correct 	1.00 	Each previous block covers (blockIdx.x*blockDim.x)*2. The beginning element is consecutive in this case so just add threadIdx.x to it.
i=blockIdx.x*threadIdx.x*2 			
	
Question 4
For a vector addition, assume that the vector length is 8000, each thread calculates one output element, and the thread block size is 1024 threads. The programmer configures the kernel launch to have a minimal number of thread blocks to cover all output elements. How many threads will be in the grid?
Your Answer 		Score 	Explanation
8000 			
8196 			
[x] 8192 	Correct 	1.00 	ceil(8000/1024.0)*1024 = 8 * 1024 = 8192. Another way to look at it is the minimal multiple of 1024 to cover 8000 is 1024*8 = 8192.
8200 			

Question 5
If we want to allocate an array of v integer elements in CUDA device global memory, what would be an appropriate expression for the second argument of the cudaMalloc() call?
Your Answer 		Score 	Explanation
n 			
n * sizeof(int) 			
v 			
[x] v * sizeof(int) 	Correct 	1.00 	This one should be self-evident.
	
Question 6
If we want to allocate an array of n floating-point elements and have a floating-point pointer variable d_A to point to the allocated memory, what would be an appropriate expression for the first argument of the cudaMalloc() call?
Your Answer 		Score 	Explanation
n 			
(void *) d_A 			
*d_A 			
[x] (void **) &d_A 	Correct 	1.00 	&d_A is pointer to a pointer of float. To convert it to a generic pointer required by cudaMalloc() should use (void **) to cast it to a generic double-level pointer.


If we want to copy 3000 bytes of data from host array h_A (h_A is a pointer to element 0 of the source array) to device array d_A (d_A is a pointer to element 0 of the destination array), what would be an appropriate API call for this data copy in CUDA?
Your Answer 		Score 	Explanation
cudaMemcpy(3000, d_A, h_A, cudaMemcpyHostToDevice); 			
cudaMemcpy(h_A, d_A, 3000, cudaMemcpyDeviceTHost); 			
cudaMemcpy(3000, h_A, d_A, cudaMemcpyHostToDevice); 			
[x] cudaMemcpy(d_A, h_A, 3000, cudaMemcpyHostToDevice); 	Correct 	1.00 	See Lecture 1.5 slides.
	
Question 8
How would one declare a variable err that can appropriately receive returned value of a CUDA API call?
Your Answer 		Score 	Explanation
cudaError err; 			
int err; 			
[x] cudaError_t err; 	Correct 	1.00 	See Lecture 1.5 slides.
cudaSuccess_t err; 			
	
Question 9

We are to process a 600X800 (600 pixels in the y or vertical direction, 800 pixels in the x or horizontal direction) picture with the PictureKernel in Lecture 1.7:

__global__ void PictureKernel(float* d_Pin, float* d_Pout, int n, int m) {
// Calculate the row # of the d_Pin and d_Pout element to process
int Row = blockIdx.y*blockDim.y + threadIdx.y;

// Calculate the column # of the d_Pin and d_Pout element to process
int Col = blockIdx.x*blockDim.x + threadIdx.x;

// each thread computes one element of d_Pout if in range
if ((Row < m) && (Col < n))
  { d_Pout[Row*n+Col] = 2*d_Pin[Row*n+Col];
  }
}

Assume that we decided to use a grid of 16X16 blocks. That is, each block is organized as a 2D 16X16 array of threads. Which of the following statements sets up the kernel configuration properly? Assume that int variable n has value 800 and int variable m has value 600. The kernel is launched with the statement PictureKernel<<>>(d_Pin, d_Pout, n, m);,dimblock>
Your Answer 		Score 	Explanation
dim3 DimGrid(1, ceil(m/16.0), ceil(n/16.0); dim3 DimBlock(1, 16, 16); 			
dim3 dimGrid(ceil(m/16.0), ceil(n/16.0), 1); dim3 DimBlock(16,16,1); 			
dim3 DimGrid(1, ceil(n/16.0), ceil(m/16.0); dim3 DimBlock(1, 16, 16); 			
[x] dim3 DimGrid(ceil(n/16.0), ceil(m/16.0), 1); dim3 DimBlock(16, 16, 1); 	Correct 	1.00 	dim3 format is (x, y, z). Since n is the size of the picture in the x direction and m is the size of the y direction, we should use n to set up the x dimension and m to set up the y dimension.

Question 10
Which of the following is true?
Your Answer 		Score 	Explanation
In a CUDA kernel, one cannot use any loops. 			
[x] To multiply a 100X96 matrix A with a 96X60 matrix B with the simple matrix multiplication kernel using 16X16 thread blocks, we will launch a grid of 28 thread blocks 	Correct 	1.00 	Correct. We will launch a grid of (100-1)/16+1 * (60-1)/16+1 = 7 * 4 = 28 blocks.
In a CUDA kernel, there can be no if statements. 			
If M is a matrix with 8 rows and 6 columns, M(5, 2) (the element in row 5 and Column 2) is accessed as M[38] in C. 			
